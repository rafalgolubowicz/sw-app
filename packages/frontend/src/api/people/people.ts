/**
 * Generated by orval v6.6.4 üç∫
 * Do not edit manually.
 * Swagger SW API
 * This is partial implementation of Star Wars API
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery,
  useMutation,
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from 'react-query';
import type {
  Person,
  CreatePersonBody,
  GetPeople200Item,
  GetPeopleParams,
  PatchPersonBody,
} from '.././model';
import { instance, ErrorType } from '../../setup/axios';

// eslint-disable-next-line @typescript-eslint/no-explicit-any
type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (
  ...args: any
) => Promise<infer R>
  ? R
  : any;

/**
 * @summary Create a person
 */
export const createPerson = (createPersonBody: CreatePersonBody) => {
  return instance<Person>({
    url: `/people`,
    method: 'post',
    data: createPersonBody,
  });
};

export const useCreatePerson = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    AsyncReturnType<typeof createPerson>,
    TError,
    { data: CreatePersonBody },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options || {};

  const mutationFn: MutationFunction<
    AsyncReturnType<typeof createPerson>,
    { data: CreatePersonBody }
  > = (props) => {
    const { data } = props || {};

    return createPerson(data);
  };

  return useMutation<
    AsyncReturnType<typeof createPerson>,
    TError,
    { data: CreatePersonBody },
    TContext
  >(mutationFn, mutationOptions);
};
/**
 * @summary Get all the people resources
 */
export const getPeople = (params?: GetPeopleParams) => {
  return instance<GetPeople200Item[]>({
    url: `/people`,
    method: 'get',
    params,
  });
};

export const getGetPeopleQueryKey = (params?: GetPeopleParams) => [
  `/people`,
  ...(params ? [params] : []),
];

export const useGetPeople = <
  TData = AsyncReturnType<typeof getPeople>,
  TError = ErrorType<void>,
>(
  params?: GetPeopleParams,
  options?: {
    query?: UseQueryOptions<AsyncReturnType<typeof getPeople>, TError, TData>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGetPeopleQueryKey(params);

  const queryFn: QueryFunction<AsyncReturnType<typeof getPeople>> = () =>
    getPeople(params);

  const query = useQuery<AsyncReturnType<typeof getPeople>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  );

  return {
    queryKey,
    ...query,
  };
};

/**
 * @summary Get specified person
 */
export const getPerson = (id: number) => {
  return instance<Person>({ url: `/people/${id}`, method: 'get' });
};

export const getGetPersonQueryKey = (id: number) => [`/people/${id}`];

export const useGetPerson = <
  TData = AsyncReturnType<typeof getPerson>,
  TError = ErrorType<void>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<AsyncReturnType<typeof getPerson>, TError, TData>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGetPersonQueryKey(id);

  const queryFn: QueryFunction<AsyncReturnType<typeof getPerson>> = () =>
    getPerson(id);

  const query = useQuery<AsyncReturnType<typeof getPerson>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!id, ...queryOptions },
  );

  return {
    queryKey,
    ...query,
  };
};

/**
 * @summary Delete specified person
 */
export const removePerson = (id: number) => {
  return instance<Person>({ url: `/people/${id}`, method: 'delete' });
};

export const useRemovePerson = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    AsyncReturnType<typeof removePerson>,
    TError,
    { id: number },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options || {};

  const mutationFn: MutationFunction<
    AsyncReturnType<typeof removePerson>,
    { id: number }
  > = (props) => {
    const { id } = props || {};

    return removePerson(id);
  };

  return useMutation<
    AsyncReturnType<typeof removePerson>,
    TError,
    { id: number },
    TContext
  >(mutationFn, mutationOptions);
};
/**
 * @summary Partially update a person
 */
export const patchPerson = (id: number, patchPersonBody: PatchPersonBody) => {
  return instance<Person>({
    url: `/people/${id}`,
    method: 'patch',
    data: patchPersonBody,
  });
};

export const usePatchPerson = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    AsyncReturnType<typeof patchPerson>,
    TError,
    { id: number; data: PatchPersonBody },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options || {};

  const mutationFn: MutationFunction<
    AsyncReturnType<typeof patchPerson>,
    { id: number; data: PatchPersonBody }
  > = (props) => {
    const { id, data } = props || {};

    return patchPerson(id, data);
  };

  return useMutation<
    AsyncReturnType<typeof patchPerson>,
    TError,
    { id: number; data: PatchPersonBody },
    TContext
  >(mutationFn, mutationOptions);
};
